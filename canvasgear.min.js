/*
 This script paints animated icons on HTML5 canvases

 version : 0.1.7
 license : GNU LGPL v3 or later https://www.gnu.org/licenses/lgpl.html
 copyright : (c) 2014 - 2019 Norbert C. Maier https://github.com/normai/canvasgear/
 note : Minimized with Google Closure Compiler
*/
var Cvgr = {Const:{versionnumber:"0.1.7", versiontimestamp:"20190329\u00b00151", bShow_Debug_Dialogs:!1}, Func:{}, Objs:{}, Vars:{bFlagTipTopTest:!1, iTimeStart:0, iTimeStartMs:0}};
Cvgr.Vars.iTimeStart = new Date;
Cvgr.Vars.iTimeStart.getTime();
Cvgr.Vars.iTimeStartMs = Cvgr.Vars.iTimeStart.getMilliseconds();
Cvgr.Vars.radiobuttn = document.getElementById("id20140819o1822");
null !== Cvgr.Vars.radiobuttn && (Cvgr.Vars.radiobuttn.checked = !0);
Cvgr.Objs.Ikon = function() {
  this.AlgoName = "default";
  this.BgColor = "Red";
  this.Color3 = this.Color2 = this.Color = "";
  this.Algo = this.Width = this.Height = this.Speed = this.SizeFactor = this.ShiftY = this.ShiftX = this.Ide = this.Hertz = null;
  this.Angle = 0;
  this.Context = this.Command = this.CmdHash2 = this.Canvas = null;
  this.DrawOnlyOnce = !1;
  this.iDrawCount = 0;
};
Cvgr.Objs.Algo = function() {
  this.Ikon = this.Funktion = this.Context = this.Canvas = null;
  this.draw = function() {
  };
};
Cvgr.Objs.Line = function(b, d, a, c, e, f) {
  void 0 === f && (f = 2);
  this.X1 = b;
  this.Y1 = d;
  this.X2 = a;
  this.Y2 = c;
  this.Colo = Trekta.Util2.colorNameToHex(e);
  this.Width = f;
};
Cvgr.Objs.Pojnt = function(b, d) {
  this.X = b;
  this.Y = d;
  this.Colhor = "red";
  this.getIt = function() {
    return this.Colhor + " " + this.x + "/" + this.Y + " apple";
  };
};
Cvgr.Vars.icos = [];
Cvgr.Vars.iFrameNo = 0;
Cvgr.startCanvasGear = function() {
  window.onload = function() {
    var a = document.getElementById("id20140819o1821"), b = document.getElementById("id20140819o1822");
    a.onclick = Cvgr.Func.setRadiobutton;
    b.onclick = Cvgr.Func.setRadiobutton;
  };
  window.requestAnimFrame = function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function(a) {
      window.setTimeout(a, 1000 / 60);
    };
  }();
  for (var b = document.getElementsByTagName("canvas"), d = 0; d < b.length; d++) {
    if (!(-1 < b[d].outerHTML.indexOf("skipthis"))) {
      var a = new Cvgr.Objs.Ikon;
      a.Canvas = b[d];
      a.Context = b[d].getContext("2d");
      a.Width = a.Canvas.height;
      a.Height = a.Canvas.width;
      a.Command = "";
      a.Command = void 0 !== a.Canvas.attributes["data-cvgr"] ? a.Canvas.attributes["data-cvgr"].value : Cvgr.Func.findComments3(a.Canvas.nextSibling);
      a.CmdHash2 = Trekta.Util2.CmdlinParser.parse(a.Command, !0);
      var c = "algo class height id width Algo Bgcolor Color Color2 Color3 Hertz Shiftx Shifty Speed".split(" ");
      a.Ide = b[d].id;
      a.Height = b[d].height;
      a.Width = b[d].width;
      if (Cvgr.Const.bShow_Debug_Dialogs) {
        var e = "Dedicated properties :";
        e += "\n[x] ico.Canvas = " + a.Canvas;
        e += "\n[x] ico.Height = " + a.Height;
        e += "\n[x] ico.Ide = " + a.Ide;
        e += "\n[x] ico.Width = " + a.Width;
        e += "\n\nElement properties :";
        for (sKey in b[d]) {
          -1 < c.indexOf(sKey) && (e += "\n[c] " + sKey + " = " + b[d][sKey]);
        }
        e += "\n\nCommandline values :";
        for (sKey in a.CmdHash2) {
          e += "\n[o] " + sKey + " = " + a.CmdHash2[sKey];
        }
        alert("[Debug 20140926\u00b00332] Canvas element:\n" + e);
      }
      a.AlgoName = void 0 === a.CmdHash2.algo || null === a.CmdHash2.algo || "" === a.CmdHash2.algo ? "default" : a.CmdHash2.algo;
      null === a.CmdHash2.bgcolor || void 0 === a.CmdHash2.bgcolor || "" === a.CmdHash2.bgcolor ? a.BgColor = "Transparent" : (a.BgColor = a.CmdHash2.bgcolor, "#" !== a.BgColor.substr(0, 1) && (a.BgColor = Trekta.Util2.colorNameToHex(a.BgColor)));
      void 0 === a.CmdHash2.color || null === a.CmdHash2.color || "" === a.CmdHash2.color ? a.Color = "#404040" : (a.Color = a.CmdHash2.color || "", "#" !== a.Color.substr(0, 1) && (a.Color = Trekta.Util2.colorNameToHex(a.Color)));
      "#" !== a.Color.substr(0, 1) ? a.Color2 = "#606060" : (a.Color2 = a.CmdHash2.color2 || "", "#" !== a.Color2.substr(0, 1) && (a.Color2 = Trekta.Util2.colorNameToHex(a.Color2)));
      void 0 === a.CmdHash2.color3 || null === a.CmdHash2.color3 || "" === a.CmdHash2.color3 ? a.Color3 = "#808080" : (a.Color3 = a.CmdHash2.color3 || "", "#" !== a.Color3.substr(0, 1) && (a.Color3 = Trekta.Util2.colorNameToHex(a.Color3)));
      a.Hertz = void 0 === a.CmdHash2.hertz || null === a.CmdHash2.hertz || "" === a.CmdHash2.hertz ? 0.2 : a.CmdHash2.hertz;
      a.ShiftX = void 0 === a.CmdHash2.shiftx || null === a.CmdHash2.shiftx || "" === a.CmdHash2.shiftx ? 0 : a.CmdHash2.shiftx;
      a.ShiftY = void 0 === a.CmdHash2.shifty || null === a.CmdHash2.shifty || "" === a.CmdHash2.shifty ? 0 : a.CmdHash2.shifty;
      a.Speed = void 0 === a.CmdHash2.speed || null === a.CmdHash2.speed || "" === a.CmdHash2.speed ? 444 : a.CmdHash2.speed;
      a.SizeFactor = "SizeFactor" in a.CmdHash2 ? a.CmdHash2.SizeFactor : 1.0;
      Cvgr.Func.startCanvasGear_setProperties();
      Cvgr.Vars.icos.push(a);
    }
  }
  b = null;
  if ("undefined" !== typeof window.bIs_IE8_ExcanvasLoaded && bIs_IE8_LocalExcanvasLoaded) {
    for (d = 0; d < Cvgr.Vars.icos.length; d++) {
      G_vmlCanvasManager.initElement(Cvgr.Vars.icos[d].Canvas);
    }
  }
  Cvgr.Func.executeFrame();
};
Cvgr.Vars.iMarkLastTwoSecond = 0;
Cvgr.Vars.iMarkLastTwoSecondFrame = 0;
Cvgr.Vars.iFramesInLastTwoSeconds = 0;
Cvgr.Vars.iFramesPerTowSeconds = 0;
Cvgr.Vars.nTrueAngleTurns = 0;
Cvgr.Vars.nIncTurnsPerFrame = 0;
Cvgr.Func.algoDevelop = function(b, d) {
  var a = b[d];
  if (!a.DrawOnlyOnce) {
    a.DrawOnlyOnce = !0;
    var c = (+a.Width + +a.Height) / 2;
    a.Context.clearRect(0, 0, a.Canvas.width, a.Canvas.height);
    a.Context.fillStyle = "#eeeeee";
    a.Context.fillRect(0, 0, a.Canvas.width, a.Canvas.height);
    var e = [], f = new Cvgr.Objs.Line(3, 3, c - 3, 3, "crimson"), g = new Cvgr.Objs.Line(4, c - 4, c - 4, c - 4, "seagreen");
    c = new Cvgr.Objs.Line(5, c - 7, c - 5, 7, "royalblue");
    e.push(f);
    e.push(g);
    e.push(c);
    for (f = 0; f < e.length; f++) {
      a.Context.beginPath(), a.Context.moveTo(e[f].X1, e[f].Y1), a.Context.lineTo(e[f].X2, e[f].Y2), a.Context.lineWidth = 3, a.Context.strokeStyle = e[f].Colo, a.Context.stroke();
    }
  }
};
Cvgr.Func.algoOblongrose = function(b, d) {
  var a = b[d];
  if (!a.DrawOnlyOnce) {
    a.DrawOnlyOnce = !0;
    var c = (+a.Width + +a.Height) / 2;
    a.Context.clearRect(0, 0, a.Canvas.width, a.Canvas.height);
    a.Context.strokeStyle = a.Color;
    a.Context.fillStyle = "#ffff00";
    a.Context.translate(c / 2, c / 2);
    for (var e = 0; 16 > e; e++) {
      a.Context.rotate(2 * Math.PI / 16), a.Context.strokeRect(0, 0, c / 2, c / 6);
    }
  }
};
Cvgr.Func.algoPulse = function(b, d) {
  var a = b[d];
  a.Context.clearRect(0, 0, a.Canvas.width, a.Canvas.height);
  a.Context.fillStyle = "#f0f0f0";
  a.Context.fillRect(0, 0, a.Canvas.width, a.Canvas.height);
  var c = a.Width > a.Height ? a.Width : a.Height;
  c *= a.SizeFactor;
  c /= 2;
  var e = c * Math.abs(Math.cos(a.Angle));
  var f = c + parseInt(a.ShiftX, 10);
  c += parseInt(a.ShiftY, 10);
  a.Context.beginPath();
  a.Context.arc(f, c, e, 0, 2 * Math.PI, !1);
  a.Context.closePath();
  a.Context.fillStyle = a.Color;
  a.Context.fill();
  a.Angle += Cvgr.Vars.nIncTurnsPerFrame * Math.PI * b[d].Hertz;
};
Cvgr.Func.algoTriangle = function(b, d) {
  var a = b[d], c = (+a.Width + +a.Height) / 2, e = 0.5 * c, f = 0.01 * c, g = 0.8 * c, k = 0.9 * c, l = 0.2 * c;
  a.Context.clearRect(0, 0, a.Canvas.width, a.Canvas.height);
  a.Context.translate(c / 2, c / 2);
  a.Context.rotate(4 * Cvgr.Vars.nIncTurnsPerFrame * a.Hertz);
  a.Context.translate(-c / 2, -c / 2);
  a.Context.fillStyle = a.BgColor;
  try {
    a.Context.fillRect(0, 0, a.Width, a.Height);
  } catch (h) {
    Cvgr.Const.bShow_Debug_Dialogs && alert('[debug 20140901\u00b00913]\nException "' + h + '"');
  }
  a.Context.beginPath();
  try {
    a.Context.moveTo(e, f);
  } catch (h) {
    Cvgr.Const.bShow_Debug_Dialogs && alert('[debug 20140901\u00b00932]\nException "' + h + '"');
  }
  a.Context.lineTo(g, k);
  a.Context.lineTo(l, k);
  a.Context.fillStyle = a.Color;
  a.Context.fill();
  a.Context.closePath();
};
Cvgr.Func.algoTriangulum = function(b, d) {
  var a = b[d], c = (+a.Width + +a.Height) / 2;
  var e = Math.sin(a.Angle) * (c - 4) / 2 + c / 2;
  a.Context.clearRect(0, 0, a.Canvas.width, a.Canvas.height);
  a.Context.fillStyle = a.BgColor;
  a.Context.fillRect(0, 0, a.Canvas.width, a.Canvas.height);
  a.Context.beginPath();
  a.Context.moveTo(3, 3);
  a.Context.lineTo(c - 3, 3);
  a.Context.lineTo(e, c - 5);
  a.Context.fillStyle = a.Color;
  a.Context.fill();
  a.Context.closePath();
  a.Context.lineWidth = 2;
  a.Context.strokeStyle = a.Color2;
  a.Context.stroke();
  a.Context.beginPath();
  a.Context.moveTo(2, c - 2);
  a.Context.lineTo(c - 2, c - 2);
  a.Context.lineWidth = 3;
  a.Context.strokeStyle = a.Color3;
  a.Context.stroke();
  a.Angle += 4 * Cvgr.Vars.nIncTurnsPerFrame * a.Hertz;
  a.Angle > c - 4 && (a.Angle = 0);
};
Cvgr.Func.executeFrame = function() {
  Cvgr.Vars.iFrameNo++;
  var b = new Date;
  b.getTime();
  var d = b - Cvgr.Vars.iTimeStart, a = Cvgr.Vars.iFrameNo / d * 1000, c = 2 * Math.floor(d / 2000);
  Cvgr.Vars.iMarkLastTwoSecond < c && (Cvgr.Vars.iMarkLastTwoSecond = c, Cvgr.Vars.iFramesInLastTwoSeconds = Cvgr.Vars.iFrameNo - Cvgr.Vars.iMarkLastTwoSecondFrame, Cvgr.Vars.iFramesPerTowSeconds = (Cvgr.Vars.iFrameNo - Cvgr.Vars.iMarkLastTwoSecondFrame) / 2, Cvgr.Vars.iMarkLastTwoSecondFrame = Cvgr.Vars.iFrameNo);
  0.001 > Cvgr.Vars.iFramesPerTowSeconds && (Cvgr.Vars.iFramesPerTowSeconds = 2 * a);
  Cvgr.Vars.nTrueAngleTurns += 1 / Cvgr.Vars.iFramesPerTowSeconds;
  1 < Cvgr.Vars.nTrueAngleTurns && --Cvgr.Vars.nTrueAngleTurns;
  Cvgr.Vars.nIncTurnsPerFrame = 1 / Cvgr.Vars.iFramesPerTowSeconds;
  d = document.getElementById("id20140828o0651");
  if (null !== d) {
    var e = "<b>CanvasGear Debug Info</b> :" + (" AlgoMode = " + (Cvgr.Vars.bFlagTipTopTest ? "Top" : "Tip") + "; ");
    e += " Frame number = " + Cvgr.Vars.iFrameNo + ";";
    e += "<br />Start time = " + Cvgr.Vars.iTimeStart + " = " + Cvgr.Vars.iTimeStart.valueOf() + ";";
    e = e + ("<br />Current time = " + b) + ("<br />Elapsed seconds (every two) = " + c + ";") + ("<br />Frames per seconds (total, average since start) = " + a);
    e += "<br />Frames per seconds (for the last two seconds) = " + Cvgr.Vars.iFramesPerTowSeconds;
    e += "<br />True angle for 1 Hz (turns) = " + Cvgr.Vars.nTrueAngleTurns + ";";
    e += "<br />Increment per frame (turns) = " + Cvgr.Vars.nIncTurnsPerFrame + ";";
    d.innerHTML = e;
  }
  for (b = 0; b < Cvgr.Vars.icos.length; b++) {
    d = document.getElementById(Cvgr.Vars.icos[b].Ide + ".info");
    if (null !== d) {
      e = "<small>CanvasGear Canvas Debug Info :";
      e += "<br />iko.Angle = " + Math.floor(10 * Cvgr.Vars.icos[b].Angle);
      e += "<br />iko.Color = " + Cvgr.Vars.icos[b].Color;
      e += "<br />iko.Height = " + Cvgr.Vars.icos[b].Height;
      e += "<br />iko.Mode = " + (Cvgr.Vars.bFlagTipTopTest ? "Top" : "Tip");
      e += "<br />iko.Width = " + Cvgr.Vars.icos[b].Width;
      for (ki in Cvgr.Vars.icos[b].CmdHash2) {
        a = Trekta.Utils.htmlEscape(Cvgr.Vars.icos[b].CmdHash2[ki]), e += "<br /> [cmd] " + ki + " = " + a;
      }
      e += "</small>";
      d.innerHTML = e;
    }
    e = Cvgr.Vars.icos[b].AlgoName;
    "develop" === e ? Cvgr.Func.algoDevelop(Cvgr.Vars.icos, b) : "oblongrose" === e ? Cvgr.Func.algoOblongrose(Cvgr.Vars.icos, b) : "pulse" === e ? Cvgr.Func.algoPulse(Cvgr.Vars.icos, b) : "ballist" === e ? Cvgr.Algs.Bal.algoBallist(Cvgr.Vars.icos, b) : "triangle" === e ? Cvgr.Func.algoTriangle(Cvgr.Vars.icos, b) : "triangulum" === e ? Cvgr.Func.algoTriangulum(Cvgr.Vars.icos, b) : Cvgr.Func.algoPulse(Cvgr.Vars.icos, b);
  }
  window.requestAnimFrame(Cvgr.Func.executeFrame);
};
Cvgr.Func.findComments3 = function(b) {
  if (null !== b && (8 === b.nodeType || null !== b && (b = b.nextSibling, null !== b && 8 === b.nodeType))) {
    return b.nodeValue;
  }
};
Cvgr.Func.setRadiobutton = function() {
  Cvgr.Const.bShow_Debug_Dialogs && alert("Debug 20140926\u00b01131");
  if (document.FormAlgoMode.AlgoMode[0].checked) {
    Cvgr.Vars.bFlagTipTopTest = !1;
    var b = document.FormAlgoMode.AlgoMode[0].value;
  } else {
    Cvgr.Vars.bFlagTipTopTest = !0, b = document.FormAlgoMode.AlgoMode[1].value;
  }
  Cvgr.Const.bShow_Debug_Dialogs && (b = "[Debug] Radiobutton algo-mode is '" + b + "'.", document.getElementById("id20140828o0651").innerHTML = b);
};
Cvgr.Func.startCanvasGear_setProperties = function() {
};
var Trekta = Trekta || {};
Trekta.Util2 = Trekta.Util2 || {};
Trekta.Util2.Webcolors = function() {
  this.pink = "#ffc0cb";
  this.lightpink = "#ffb6c1";
  this.hotpink = "#ff69b4";
  this.deeppink = "#ff1493";
  this.palevioletred = "#db7093";
  this.mediumvioletred = "#c71585";
  this.lightsalmon = "#ffa07a";
  this.salmon = "#fa8072";
  this.darksalmon = "#e9967a";
  this.lightcoral = "#f08080";
  this.indianred = "#cd5c5c";
  this.crimson = "#dc143c";
  this.firebrick = "#b22222";
  this.darkred = "#8b0000";
  this.red = "#ff0000";
  this.orangered = "#ff4500";
  this.tomato = "#ff6347";
  this.coral = "#ff7f50";
  this.darkorange = "#ff8c00";
  this.orange = "#ffa500";
  this.yellow = "#ffff00";
  this.lightyellow = "#ffffe0";
  this.lemonchiffon = "#fffacd";
  this.lightgoldenrodyellow = "#fafad2";
  this.papayawhip = "#ffefd5";
  this.moccasin = "#ffe4b5";
  this.peachpuff = "#ffdab9";
  this.palegoldenrod = "#eee8aa";
  this.khaki = "#f0e68c";
  this.darkkhaki = "#bdb76b";
  this.gold = "#ffd700";
  this.cornsilk = "#fff8dc";
  this.blanchedalmond = "#ffebcd";
  this.bisque = "#ffe4c4";
  this.navajowhite = "#ffdead";
  this.wheat = "#f5deb3";
  this.burlywood = "#deb887";
  this.tan = "#d2b48c";
  this.rosybrown = "#bc8f8f";
  this.sandybrown = "#f4a460";
  this.goldenrod = "#daa520";
  this.darkgoldenrod = "#b8860b";
  this.peru = "#cd853f";
  this.chocolate = "#d2691e";
  this.saddlebrown = "#8b4513";
  this.sienna = "#a0522d";
  this.brown = "#a52a2a";
  this.maroon = "#800000";
  this.darkolivegreen = "#556b2f";
  this.olive = "#808000";
  this.olivedrab = "#6b8e23";
  this.yellowgreen = "#9acd32";
  this.limegreen = "#32cd32";
  this.lime = "#00ff00";
  this.lawngreen = "#7cfc00";
  this.chartreuse = "#7fff00";
  this.greenyellow = "#adff2f";
  this.springgreen = "#00ff7f";
  this.mediumspringgreen = "#00fa9a";
  this.lightgreen = "#90ee90";
  this.palegreen = "#98fb98";
  this.darkseagreen = "#8fbc8f";
  this.mediumseagreen = "#3cb371";
  this.seagreen = "#2e8b57";
  this.forestgreen = "#228b22";
  this.green = "#008000";
  this.darkgreen = "#006400";
  this.mediumaquamarine = "#66cdaa";
  this.cyan = this.aqua = "#00ffff";
  this.lightcyan = "#e0ffff";
  this.paleturquoise = "#afeeee";
  this.aquamarine = "#7fffd4";
  this.turquoise = "#40e0d0";
  this.mediumturquoise = "#48d1cc";
  this.darkturquoise = "#00ced1";
  this.lightseagreen = "#20b2aa";
  this.cadetblue = "#5f9ea0";
  this.darkcyan = "#008b8b";
  this.teal = "#008080";
  this.lightsteelblue = "#b0c4de";
  this.powderblue = "#b0e0e6";
  this.lightblue = "#add8e6";
  this.skyblue = "#87ceeb";
  this.lightskyblue = "#87cefa";
  this.deepskyblue = "#00bfff";
  this.dodgerblue = "#1e90ff";
  this.cornflowerblue = "#6495ed";
  this.steelblue = "#4682b4";
  this.royalblue = "#4169e1";
  this.blue = "#0000ff";
  this.mediumblue = "#0000cd";
  this.darkblue = "#00008b";
  this.navy = "#000080";
  this.midnightblue = "#191970";
  this.lavender = "#e6e6fa";
  this.thistle = "#d8bfd8";
  this.plum = "#dda0dd";
  this.violet = "#ee82ee";
  this.orchid = "#da70d6";
  this.magenta = this.fuchsia = "#ff00ff";
  this.mediumorchid = "#ba55d3";
  this.mediumpurple = "#9370db";
  this.blueviolet = "#8a2be2";
  this.darkviolet = "#9400d3";
  this.darkorchid = "#9932cc";
  this.darkmagenta = "#8b008b";
  this.purple = "#800080";
  this.indigo = "#4b0082";
  this.darkslateblue = "#483d8b";
  this.slateblue = "#6a5acd";
  this.mediumslateblue = "#7b68ee";
  this.white = "#ffffff";
  this.snow = "#fffafa";
  this.honeydew = "#f0fff0";
  this.mintcream = "#f5fffa";
  this.azure = "#f0ffff";
  this.aliceblue = "#f0f8ff";
  this.ghostwhite = "#f8f8ff";
  this.whitesmoke = "#f5f5f5";
  this.seashell = "#fff5ee";
  this.beige = "#f5f5dc";
  this.oldlace = "#fdf5e6";
  this.floralwhite = "#fffaf0";
  this.ivory = "#fffff0";
  this.antiquewhite = "#faebd7";
  this.linen = "#faF0e6";
  this.lavenderblush = "#fff0f5";
  this.mistyrose = "#ffe4e1";
  this.gainsboro = "#dcdcdc";
  this.lightgrey = "#d3d3d3";
  this.silver = "#c0c0c0";
  this.darkgray = "#a9a9a9";
  this.gray = "#808080";
  this.dimgray = "#696969";
  this.lightslategray = "#778899";
  this.slategray = "#708090";
  this.darkslategray = "#2f4f4f";
  this.black = "#000000";
  this.rebeccapurple = "#663399";
  this.verydarkviolett = "#d000d0";
};
Trekta.Util2.colorNameToHex = function(b) {
  var d = new Trekta.Util2.Webcolors;
  b = b.toLowerCase();
  return d[b] ? d[b] : "#C0C0C0";
};
Trekta.Util2.CmdlinParser = function() {
  parse = function(b, d) {
    void 0 === b && (b = "");
    var a = [];
    var c = !1;
    for (var e = "", f = 0; f < b.length; f++) {
      " " !== b.charAt(f) && "=" !== b.charAt(f) || c ? '"' === b.charAt(f) && d ? c = !c : e += b.charAt(f) : (a.push(e), e = "", "=" === b.charAt(f) && a.push("="));
    }
    a.push(e);
    c = [];
    for (f = 0; f < a.length; f++) {
      "" !== a[f] && (e = a[f], c[e] = "<n/a>", "=" === a[f + 1] && (c[e] = a[f + 2], f++, f++));
    }
    return c;
  };
  return {parse:parse};
}();
Trekta = Trekta || {};
Trekta.Utils = Trekta.Utils || {getFileNameFull:function() {
  var b = document.location.href;
  b = b.substring(0, -1 === b.indexOf("?") ? b.length : b.indexOf("?"));
  return b = b.substring(0, -1 === b.indexOf("#") ? b.length : b.indexOf("#"));
}, getFilenamePlain:function() {
  var b = Trekta.Utils.getFileNameFull();
  -1 !== b.indexOf("/", b.length - 1) && (b += "index.html");
  b = b.split("/");
  return b = b[b.length - 1];
}, getXMLHttp:function() {
  if (Trekta.Utils.bIs_Browser_Explorer) {
    try {
      var b = new ActiveXObject("Msxml2.XMLHTTP");
    } catch (d) {
      try {
        b = new ActiveXObject("Microsoft.XMLHTTP");
      } catch (a) {
        return alert("Sorry, your browser does not support AJAX [message 20160613\u00b00421]"), !1;
      }
    }
  } else {
    b = new XMLHttpRequest;
  }
  return b;
}, htmlEscape:function(b) {
  b = b.replace(/</g, "&lt;");
  return b = b.replace(/>/g, "&gt;");
}, isScriptAlreadyLoaded:function(b) {
  b = b.replace(/\./g, "\\.");
  b = new RegExp(b + "$", "");
  var d = document.getElementsByTagName("SCRIPT");
  if (d && 0 < d.length) {
    for (var a in d) {
      if (d[a].src && d[a].src.match(b)) {
        return !0;
      }
    }
  }
  return !1;
}, pullScriptBehind:function(b, d) {
  if (Trekta.Utils.isScriptAlreadyLoaded(b)) {
    Trekta.Utils.bShow_Debug_Dialogs && alert("[Debug]\n\nScript is already loaded:\n\n" + b), d();
  } else {
    var a = DafStart.Conf.s_DaftariBaseFolderRel + b;
    0 < b.indexOf("showdown/showdown") && (a = b);
    var c = document.getElementsByTagName("head")[0], e = document.createElement("script");
    e.type = "text/javascript";
    e.src = a;
    e.onload = d;
    c.appendChild(e);
    return !0;
  }
}, readTextFile1:function(b, d) {
  var a = "", c = Trekta.Utils.getXMLHttp();
  d ? c.open("GET", b, !0) : c.open("GET", b, !1);
  c.onreadystatechange = function() {
    4 !== c.readyState || 200 !== c.status && 0 !== c.status || (a = c.responseText);
  };
  try {
    c.send(null);
  } catch (e) {
  }
  return a;
}, retrieveScriptFolderAbs:function(b) {
  var d = b.replace(/\./g, "\\.") + "$";
  b = new RegExp(d, "");
  d = new RegExp("(.*)" + d, "");
  var a = "", c = document.getElementsByTagName("SCRIPT");
  if (c && 0 < c.length) {
    for (var e in c) {
      c[e].src && c[e].src.match(b) && (a = c[e].src.replace(d, "$1"));
    }
  }
  return a;
}, retrieveScriptFolderRel:function(b) {
  var d, a = document.getElementsByTagName("script"), c = null, e = !1;
  for (d = 0; d < a.length; d++) {
    if (0 < a[d].src.indexOf(b)) {
      c = a[d];
      e = !0;
      break;
    }
  }
  if (!e) {
    return alert("[20160501\u00b01631] Fatal error\nThe wanted script could not be found.\nIt looks like the search string is wrong.\n\nsearch string = " + b), "";
  }
  d = c.src;
  d = d.substring(0, d.length - b.length);
  Trekta.Utils.s_DaftariBaseFolderAbs = d;
  a = "";
  for (d = 0; d < c.attributes.length; d++) {
    if ("src" === c.attributes[d].name) {
      a = c.attributes[d].value;
      break;
    }
  }
  return a.substring(0, a.length - b.length + 1);
}, windowOnloadDaisychain:function(b) {
  if (window.onload) {
    var d = window.onload;
    window.onload = function() {
      d();
      b();
    };
  } else {
    window.onload = function() {
      b();
    };
  }
}, bIs_Browser_Chrome:navigator.userAgent.match(/Chrome/) ? !0 : !1, bIs_Browser_Explorer:navigator.appName.match(/Explorer/) ? !0 : !1, bIs_Browser_Firefox:navigator.userAgent.match(/Firefox/) ? !0 : !1, bIs_Browser_Opera:navigator.userAgent.match(/(Opera)|(OPR)/) ? !0 : !1, bShow_Debug_Dialogs:!1};
Trekta.Utils.windowOnloadDaisychain(Cvgr.startCanvasGear);
