

   disposed 20140926°0832 from canvasgear.js
   ⁞// function parseCmdStringOne()
   ⁞/**
   ⁞ * This function parses a commandstring.
   ⁞ * @id 20140828°0841
   ⁞ * @status ...
   ⁞ * @callers ...
   ⁞ * @todo This is an utility function, possibly shift to utility library.
   ⁞ * @todo Improve ... e.g. allow leaving the leading and trailing blank ...
   ⁞ * @ ref : About tokenizing with split() [20140828o0832]
   ⁞ *     http://www.majstro.com/Web/Bedrijf/js/js_Global_String_split2.html
   ⁞ * @param oProps - associative array to fill with key/value pairs
   ⁞ * @param sCmd - the string to parse
   ⁞ */
   ⁞/*
   ⁞function parseCmdStringOneELIMINATE(oProps, sCmd)
   ⁞{
   ⁞   var a1 = sCmd.split(" ");                           // delimiter is one blank
   ⁞   for (var i = 0; i < a1.length; i++)
   ⁞   {
   ⁞      var a2 = a1[i].split("=");
   ⁞      // is it a known key/value pair?
   ⁞      if (a2.length == 2) {
   ⁞         if (a2[0] == 'algo')    { oProps.AlgoName = a2[1]; }
   ⁞         if (a2[0] == 'bgcolor') { oProps.BgColor  = a2[1]; }
   ⁞         if (a2[0] == 'color')   { oProps.Color    = a2[1]; }
   ⁞         if (a2[0] == 'color2')  { oProps.Color2   = a2[1]; }
   ⁞         if (a2[0] == 'color3')  { oProps.Color3   = a2[1]; }
   ⁞         if (a2[0] == 'hertz')   { oProps.Hertz    = a2[1]; }
   ⁞         if (a2[0] == 'shiftx')  { oProps.ShiftX   = a2[1]; }
   ⁞         if (a2[0] == 'shifty')  { oProps.ShiftY   = a2[1]; }
   ⁞         if (a2[0] == 'speed')   { oProps.Speed    = a2[1]; }
   ⁞      }
   ⁞   }
   ⁞   // supplement default values
   ⁞   if (oProps.AlgoName == null) {
   ⁞      oProps.AlgoName = 'default';
   ⁞   }
   ⁞   if (oProps.Color == null) {
   ⁞      oProps.Color = '#bb1111';
   ⁞   }
   ⁞   if (oProps.Hertz == null) {
   ⁞      oProps.Hertz = 0.2;
   ⁞   }
   ⁞   if (oProps.Speed == null) {
   ⁞      oProps.Speed = 456;
   ⁞   }
   ⁞}
   ⁞*/
   ܀


   disposed 20140926°0831 from canvasgear.js
   ⁞/**
   ⁞ * This function parses a commandstring.
   ⁞ * @id 20140926°0541
   ⁞ * @status
   ⁞ * @callers
   ⁞ * @todo This is an utility function, possibly shift to utility library.
   ⁞ * @todo Improve ... e.g. allow leaving the leading and trailing blank ...
   ⁞ * @ref : About tokenizing with split() [20140828°0832]
   ⁞ *     http://www.majstro.com/Web/Bedrijf/js/js_Global_String_split2.html
   ⁞ * @see ref 20140926°0621 'Krasimir : Simple command line parser in JS'
   ⁞ * @note : This shall replace parseCmdStringOneELIMINATE()
   ⁞ * @param oProps - associative array to fill with the wanted key/value pairs
   ⁞ * @param sCmd - the string to parse for key/value pairs
   ⁞ */
   ⁞/*
   ⁞function parseCmdStringTwoELIMINATE(oCmdELIM, sCmd)
   ⁞{
   ⁞   var a1 = sCmd.split(" ");
   ⁞   var a2 = new Array();
   ⁞   // unfinished
   ⁞   var bQuot = false;
   ⁞   for (var i = 0; i < a1.length; i++)
   ⁞   {
   ⁞      if (a1[i][0] == "\"") {
   ⁞         bQuot = true;
   ⁞      }
   ⁞      if (a1[-1] == "\"") {
   ⁞         bQuot = false;
   ⁞      }
   ⁞   }
   ⁞   // the old job
   ⁞   for (var i = 0; i < a1.length; i++)
   ⁞   {
   ⁞      var a3 = a1[i].split("=");
   ⁞      // is it a key/value pair?
   ⁞      if (a3.length == 2) {
   ⁞         oCmdELIM[a3[0]] = a3[1];
   ⁞      }
   ⁞   }
   ⁞}
   ⁞*/
   ܀


   archived 20140926°0711
   ⁞//--------------------------------------------------
   ⁞/**
   ⁞ * This is the archived version of the original CommandParser function.
   ⁞ * @id 20140926°0631
   ⁞ * @status
   ⁞ * @callers
   ⁞ * @see ref 20140926°0621 'Krasimir : Simple command line parser in JS'
   ⁞ * @param str = The string to be parsed
   ⁞ * @param lookForQuotes = Flag whether to process quotes or not
   ⁞ */
   ⁞var CommandParserARCHIVED = (function() {
   ⁞   var parse = function(str, lookForQuotes) {
   ⁞      var args = [];
   ⁞      var readingPart = false;
   ⁞      var part = '';
   ⁞      ///for(var i=0; i                                //
   ⁞      for ( var i = 0; i < str.length; i++) {          // reconstructed
   ⁞         if ( str.charAt(i) === ' ' && !readingPart ) {
   ⁞            args.push(part);
   ⁞            part = '';
   ⁞         } else {
   ⁞            if ( str.charAt(i) === '\"' && lookForQuotes ) {
   ⁞               readingPart = !readingPart;
   ⁞            } else {
   ⁞               part += str.charAt(i);
   ⁞            }
   ⁞         }
   ⁞      }
   ⁞      args.push(part);
   ⁞      return args;
   ⁞   }
   ⁞   return {
   ⁞       parse: parse
   ⁞   }
   ⁞})();
   ⁞//--------------------------------------------------
   ܀

   ———————————————————————
   [file 20140830°0241] ܀Ω
