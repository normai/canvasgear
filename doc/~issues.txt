
   ****************
   Issues and todos
   ****************

   issue 20190401°1347 'loaded script not available in onLoad callback'
   matter : Function soundManager.setup is not available in the script onLoad
      callback. It looks like it is only available after the callback has
      finished. Should it not already be available in the callback itself?
   workaround : See func 20190401°1353 pullbehind_soundWorkaround
   location : canvasgear.js func 20190401°1343 pullbehind_soundOnLoad
   status : Workaround. Not clear what exactly is going on.
   ܀

   todo 20190401°0523 'combine piggy variables'
   do : Somehow combine all piggy variables to one single object.
   note : If that were done, then in seq 20190330°0344 'create piggy
      array set', one single push() should suffice, instead of ~eight.
   proposal: Use an array of objects.
   status : open
   ܀

   issue 20190401°0435 'hamster appears multiple times'
   matter : The Hamster algo paints a series of smaller and smaller faces
      with each frame. It shall draw one and the same face each frame.
   note : The same happens with 'oblongrose' after I put the DrawOnlyOnce
      procession into func 20140815°1221 executeFrame. This tells, it is
      not a SVG problemm with Hamster, but one of the executeAlgorithm function.
   location : Hamster.executeAlgorithm and oblongrose.executeAlgorithm
   note : A key location is seq 20190401°0431 'process DrawOnlyOnce
      flag', or the DrawNumberLimit counter flag respectively.
   finding : The reason for the shifted repeatings is a translation on the
      context which shall not be done if the drawing is multiple times.
   status : open
   ܀

   issue 20190330°0355 'callback parameters useless'
   matter : Providing the callback for pullScriptBehind seems useless,
      because we call that three times, giving as parameter a variable,
      which has the values 0, then 1, then 2. But when the callback is
      fired three times, it always gets the parameter 2.
   note : Looks like it has to do with value versus reference. A partial
      brute force solution comes with array 20190330°0415 aCallbackStockpile.
      The parameters in the sucessive calls must not come from one variable,
      but must somehow be galvanically isolated, each created on it's own.
   status : solved brute force, no elegant solution yet
   ܀

   issue 20190330°0351 'activation flag flavours'
   matter : Flag 20190330°0143 bIsFirstFrame does not suffice.
       Due to the pull-behind and execute-frame-continue mechanisms,
       this pure frame-specific flag seems not suffice our needs.
   matter : Perhaps we better switch a flags like bIsDefaultValuesDone
   matter : Perhaps additionally we need algo-specific flag like bIsAlgoActivated
   note : See property 20190330°0353 bIsDefaultSettingDone
   status : processing
   ܀

   todo 20190330°0151 'read properties in lump-sum'
   location : Function 20190330°0111 startCanvasGr_evalCmdlin
   matter : The properties are precessed humble one by one.
   do : Process properties in lump-sum treatment
   chain : todo 20190329°1045 'commandline and default values'
   status : under construction (see func 20190330°0241 initializeCanvas)
   ܀

   todo 20190330°0121 'register test buttons cleanup'
   matter : Anonymous function 20140819°1811 registers an event handler
      pretty bold. But that handler is never called, because startCanvasGear()
      is executed only after the onload event was fired?
   do : Cleanup this. But the test buttons work anyway, do they? Why?
   location : Function 20140815°1241 startCanvasGear
   status : open
   ܀

   todo 20190329°0833 'centralize progression'
   matter : Sequence 20140829°0519 'calculate progression' and it's siblings
      exists equally in most algos. This calculation should be done at only
      one single place, at the caller.
   location : At the bottom of most functions executeAlgorithm e.g. 20140829°0511
   status : open
   ܀

   todo 20140926°1341 'provide writeText method'
   do : Outsource below sequence to a dedicated algorithm e.g. 'writetext'
   location : Many drawing functions
   status : open
   ܀

   issue 20140815°0641 'browser is missing requestAnimationFrame'
   matter : Method requestAnimationFrame does not exist in IE8
   location : canvasgear.js seq 20140815°0651 'workaround for missing requestAnimFrame'
   workaround : Use the fallback shim layer by Paul Irish (seq 20140815°0651).
   note 20190324°0143 : The method comes with IE10, IE9 is still missing it.
   status : Leave as is until IE9 support will be discontinued.
   ܀

   issue 20150223°1851 'canvas inside paragraph'
   text : IE8 and probably higher, do not render a canvas inside
      a paragraph. (1) This is a drawback because until now, I usually placed
      icons and images inside paragraphs. Those images cannot simply be
      replaced by canvases. As a workaround, I placed the canvas inside
      a dedicated floating div (css div.iconFloatLeft rule 20150223°1841°.
      (2) And it is another drawback, because the Daftari page element
      editor does (so far) not equip the div element with edit icons.
   chain : issue 20150223°1821 'canvas inside paragraph does not work with IE'
   note : As reference for the effect and how to cope, see page 20150223°1511
      http://www.trekta.biz/svn/demomatrix/trunk/pages/sql/intro.html
   status : open
   ܀

   issue 20150223°1821 'canvas inside paragraph does not work with IE'
   location : File canvasgear.js for IE
   symptom : If embedding the canvas inside a <p> tag, IE9 will not show it.
   problem : A 'div' inside a 'p' like '<p><div></div></p>' is not valid HTML.
   see : ref 20150223°1831 'stackoverflow: div inside p is adding extra p'
   see : ref 20150223°1813 'Rakesh Pai: IE runtime error using innerHTML'
   workaround : Just wrap the canvas element plus it's command comment
      into a div. No! This destroys the paragraphs 'iconfloatleft' style!
   proposal : Perhaps a javascript preprocessor could find canvases directly
      inside a paragraph, and wrap them with a div element.
   status : Partially solved by workaround. Does work with IE10 but not IE9 and below.
   ܀

   todo 20140901°0621 'gereralize features e.g. rotation'
   do : Generalize features. E.g. make the rotate function not part of one specific
         algorithm, but make a rotation applied to all algorithms like an overlay.
   status : open
   ܀

   ———————————————————————
   [file 20140903°0112] ܀Ω
