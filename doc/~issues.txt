
   ****************
   Issues and todos
   ****************

   issue 20190330°0355 'callback parameters useless'
   matter : Providing the callback for pullScriptBehind seems useless,
      because we call that three times, giving as parameter a variable,
      which has the values 0, then 1, then 2. But when the callback is
      fired three times, it always gets the parameter 2.
   note : Looks like it has to do with value versus reference. A partial
      brute force solution comes with array 20190330°0415 aDebugCallback.
      The parameters in the sucessive calls must not come from one variable,
      but must somehow be galvanically isolated, each created on it's own.
   status : open
   ܀

   issue 20190330°0351 'activation flag flavours'
   matter : Flag20190330°0143 bIsFirstFrame might not suffice.
       Due to the pull-behind and execute-frame-continue mechanisms,
       this pure frame-specific flag seems not suffice our needs.
   matter : Perhaps we better switch a flags like bIsDefaultValuesDone
   matter : Perhaps additionally we need algo-specific flag like bIsAlgoActivated
   note : See properties 20190330°0352 and 20190330°0353
   status : processing
   ܀

   issue 20190330°0331 'pull-behind only only per algo'
   matter : Do the pull-behind only once for one algo, even if that algo appears
      multiple times on the page. Otherwise curious script abortion observed.
   note : This was seen on page 20190324°0511 demo2.html
   status : under construction
   ܀

   todo 20190330°0151 'read properties in lump-sum'
   location : Function 20190330°0111 startCanvasGr_evalCmdlin
   matter : The properties are precessed humble one by one.
   do : Process properties in lump-sum treatment
   chain : todo 20190329°1045 'commandline and default values'
   status : open
   ܀

   todo 20190330°0121 'register test buttons cleanup'
   matter : Anonymous function 20140819°1811 registers an event handler
      pretty bold. But that handler is never called, because startCanvasGear()
      is executed only after the onload event was fired?
   do : Cleanup this. But the test buttons work anyway, do they? Why?
   location : Function 20140815°1241 startCanvasGear
   status : open
   ܀

   todo 20190329°1045 'commandline and default values'
   text : The commandline should be evaluated only after the algorithm is
      known, and the algo default properties are assigned. This makes a clear
      cascaded order, where just each later value overwrite the earlier one.
   finding : It may be not soo simple, because at least the algorithm name
      must have been read already from the commandline, before the others
      values can be processed. And only if the algo name is know, possibly
      a pull-behind with unclear result happens.
   finding : The bulk commandline interpretation should ideally happen
      after the pull-behind process has settled.
   chain : todo 20190330°0151 'read properties in lump-sum'
   status : open
   ܀

   todo 20190329°0833 'centralize progression'
   matter : Sequence 20140829°0519 'calculate progression' and it's siblings
      exists equally in most algos. This calculation should be done at only
      one single place, at the caller.
   location : At the bottom of most functions executeAlgorithm e.g. 20140829°0511
   status : open
   ܀

   issue 20190329°0421 'impossible index'
   matter : The function is called with iNdx = 2, when only two canvases
      exist on the page. How can this be? Where from comes this call?
   workaround : As a quick-n-dirty remedy I just try a condition
   location : func executeAlgorithm called by Cvgr.Func.executeFrame
   priority : high
   status : open
   ܀

   issue 20160416°1321 'IE8 canvas Context.fillText not supported'
   symptom : Text not drawn in IE8
   location : file 20140916°0411 canvasgersalgos.js "iko.Context.fillText(..)"
   ref : 20160419°1212 presents solutions
       http://stackoverflow.com/questions/6039584/html5-canvas-excanvas-js-ie-text-not-showing-in-ie7
   ref : 20160419°1213 https://code.google.com/archive/p/canvas-text/
   ref : 20160419°1216 http://canvas-text.googlecode.com/svn-history/trunk/
   finding : I tested versions 20160419°121502 and 20160419°122102 of excanvas.js,
      and those did not work either. They just showed a differrent error in IE8.
   solution : Possibly use canvas-text.js (just this may be too expensive).
   status : open (and possibly will never be closed)
   note :
   ܀

   issue 20140815°0641 'browser is missing requestAnimationFrame'
   matter : Method requestAnimationFrame does not exist in IE8
   location : canvasgear.js seq 20140815°0651 'workaround for missing requestAnimFrame'
   workaround : Use the fallback shim layer by Paul Irish (seq 20140815°0651).
   note 20190324°0143 : The method comes with IE10, IE9 is still missing it.
   status : Leave as is until also IE9 support shall be dropped.

   issue 20150223°1851 'canvas inside paragraph'
   text : IE8 and probably higher, do not render a canvas inside
      a paragraph. (1) This is a drawback because until now, I usually placed
      icons and images inside paragraphs. Those images cannot simply be
      replaced by canvases. As a workaround, I placed the canvas inside
      a dedicated floating div (css div.iconFloatLeft rule 20150223°1841°.
      (2) And it is another drawback, because the Daftari page element
      editor does (so far) not equip the div element with edit icons.
   chain : issue 20150223°1821 'canvas inside paragraph does not work with IE'
   note : As reference for the effect and how to cope, see page 20150223°1511
      http://www.trekta.biz/svn/demomatrix/trunk/pages/sql/intro.html
   status :
   ܀

   issue 20150223°1821 'canvas inside paragraph does not work with IE'
   location : File canvasgear.js for IE
   symptom : If embedding the canvas inside a <p> tag, IE9 will not show it.
   problem : A 'div' inside a 'p' like '<p><div></div></p>' is not valid HTML.
   see : ref 20150223°1831 'stackoverflow: div inside p is adding extra p'
   see : ref 20150223°1813 'Rakesh Pai: IE runtime error using innerHTML'
   workaround : Just wrap the canvas element plus it's command comment
      into a div. No! This destroys the paragraphs 'iconfloatleft' style!
   proposal : Perhaps a javascript preprocessor could find canvases directly
      inside a paragraph, and wrap them with a div element.
   status : Partially solved by workaround. Does work with IE10 but not IE9 and below.
   ܀

   issue 20140926°1321 'IE8 fails with Context.fillText'
   matter : IE8 does not understand the Context.fillText() function.
   location : func 20140926°1211 Cvgr.Algos.Ballist.executeAlgo_drawDiagonal
   status : finished, IE8 no more supported
   ܀

   todo 20140904°0711 'refactor property parsing'
   todo : Refactor. Compact sequence 20140904°0645 to one-liners or
      somehow eliminate the individual processing of each single property.
      Or outsource above sequence to dedicated helper function. Or use
      a loop over all object properties instead individual properties.
   location : canvasgear/canvasgear.js
   status : open
   ܀

   issue 20140901°0933 'Opera 10 peculiar about capitals'
   note : If e.g. 'iko.width' was used instead 'iko.Width', Opera will
      receive iPt1x/iPt1y as NaN and throw an exception here. If this
      line here throws exception, far below lines will do so as well.
   location : canvasgear.js, canvasgear-ballist.js
   solution : Use a try envelop on the first element.
   status : Should be finished.
   ܀

   issue 20140901°0911 'Opera fillRect() fail'
   title : Opera fillRect() fail
   location : canvasgear.js with Opera 10.53
   descr : in line "iko.Context.fillRect(0, 0, iko.Canvas.Width, iko.Canvas.Height);",
      Opera throws exception 'Error: NOT_SUPPORTED_ERR'.
   workaround : Wrap line in try envelope. Disadvantage is, that
      the background is no more filled with it's color.
   note : At other locations, fillRect() obviously works fine in Opera.
   finding 20140901°0921 : Opera seems being case sensitive with object
      properties e.g. wrong 'iko.Canvas.Width' vs. right 'iko.Canvas.width'!
   priority : Low
   status : Open
   ܀

   todo 20140901°0633 'support svg rendering'
   do : Write algorithm to draw verctor graphics from graphic files like *.svg.
   status : open
   ܀

   todo 20140901°0631 ''
   do : Allow algorithms be provided in separate files.
   status : done with feature 20180619°0113 'supply external algorithm scripts'
   ܀

   todo 20140901°0621 'gereralize features e.g. rotation'
   do : Generalize features. E.g. make the rotate function not part of one specific
         algorithm, but make a rotation applied to all algorithms like an overlay.
   status :
   ܀

   todo 20140901°0611 ''
   matter : JavaScript advanced programming. Currently, different algorithms
      are called via a switch, depending on the given token from the commandline.
   do : Make the algorithm function a property of the icon, so it can
         directly be called without any switch.
   status :
   ܀

   issue 20140901°0331 'IE8 demands extra plus sign'
   matter :  The plus sign before iko.Width and iko.Height is wanted for
       IE8, which will otherwise interpret that as string, and e.g.
       iSize will have the value 3232 if width=64 and height=64.
   location : e.g. line 20140916°0821
       "var iSize = (+iko.Width + +iko.Height) / 2;"
   status : Finished (feature 20180619°0115 'discontinue IE8 support')
   ܀

   issue 20140831°0631 'IE8 fails drawing canvas'
   matter : Below this point (in page 20140902°1311 attic.html), IE8 draws no more icons.
   note : This has directly to do with debug sequence 20140817°2321 in canvasgearexcanvas.js.
   note : Could not find out why.
   workaround : None yet
   status : Finished (feature 20180619°0115 'discontinue IE8 support')
   ܀

   issue 20140830°0231 'IE webcolors'
   text : IE8 does not understand all webcolors. IE understands
      e.g 'blue' but not 'lightblue'.
   workaround : Use RGB values for all colors. Or implement a mapping function.
   status :
   ܀

   issue 20140830°0221 'IE get HTML comment'
   summary : About reading a HTML comment from various browsers
   findings :
      (1) A comment node cannot be directly found.
      (2) It can be found in a node collection it's nodeType, which is 8.
      (3) Having that node, IE and the others differ
      (3.1) In IE, the comment can be read via n.innerHTML or n.nodeValue.
      (3.2) In others, n.innerHTML yields 'undefined'.
      (3.3) In others, the comment can be read via n.nodeValue.
   location : File canvasgear.js seq 20140830°0211
   note : After sequence 20140830°0311, it looks as if the both browsers
      understand nodeValue. Possibly, this issue was just a misconception?
   status : Finished
   ܀

   issue 20140829°0331 'Color and stroke select on canvas'.
   matter : When drawing on a canvas, a line is started with beginPath,
      the color and the stroke can be set. On one canvas, only one style
      seems possible, but more styles are wanted.
   ref : Screenshot 20140829°0322. Note icons one and **two**. It tries
          to draw two objects, a triangle and a line. It has only one color
          and stroke, not different, as should. How to write code to put two
          objects on one canvas?
   todo : Clear whether this is just a coding particularity, or whether
       a canvas can indeed display only one color and stroke. Perhaps
       it has to do with layers or the like. [todo 20140829°0315]
   status : Probably finished
   ܀

   issue 20140828°1151 'IE8 canvas innerHTML unusable'
   matter : With IE8, the canvas property 'innerHTML' is unusable. With workaround
      func 20140828°1231 findComments1 or func 20140828°1241 findComments2 applied,
      IE8 may display the dialog as in screenshot 20140828°1321.
   solution : See sequence/function 20140830°0311.
   location : File canvasgear.js seq 20140830°0211
   workaround : Use something else to store the icon command, e.g.
       a comment like in seq 20140828°1251 (discarded 20140830°0246)
   note : Workaround was not useful, makes IE freeze see screenshot 20140828°1321
      http://www.trekta.biz/svn/canvasgeardev/trunk/canvasgear/doc/img/20140828o1321.icondrawer--ie--get-comments.png
   ref 20190324°0813 : A demo how to find comments is now in repo 20140713°1811
        http://www.trekta.biz/svn/demosjs/trunk/findcomments/findcomments.html
   status : Finished with ref 20190324°0813
   ܀

   issue 20140828°0751 'algo calling params quirk'
   title : Algo calling params quirk
   symptom : When calling the outsourced algorithm with the plain Ikon object
      as parameter, only the first canvas is drawn, the other are skipped.
   suspect : Parameter passing is not consequently done by reference.
   workaround : Call it with the full Ikon objects array plus the index.
   note : About failed attempts to pass the plain icon
      - // var x = icos[iFor];
      - // icos[iFor] = algoPulse(x);
      - // algoPulse(icos[iFor]);
   note 20190329°1033 : Issue seems finished but I do not know why, and what it was before.
   status : seems finished (note 20190329°1033)
   ܀

   issue 20140828°0541 'IE8 is drawing outside the canvas'
   matter : If painting outside the canvas, two different behaviours result:
      (1) IE8: The object is painted even outside the canvas borders. This is what IE does.
      (2) Chrome, FF, Opera: The object outside the canvas borders is clipped.
   note : One question is, whether for the outborder parts, the calculations are done
      or skipped. The answer were interesting for resource and performance understanding.
   ref : Screenshots see ..
   status : finished
   ܀

   todo 20140815°1141
   do : Outsource drawing code from the time loop to a dedicated function,
         which can serve as the Algo property of the Ikon object.
   status : done
   ܀




   ———————————————————————
   [file 20140903°0112] ܀Ω
